[
    {
        "id": "94d07e407c25f282",
        "type": "tab",
        "label": "flow-radar-01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "49e416bfab1d4055",
        "type": "tab",
        "label": "Frigate MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90d5c925f9fbf9fd",
        "type": "tab",
        "label": "Aux data capture",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28627559bebdc324",
        "type": "tab",
        "label": "Event+Speed Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "239d7b3ba410ad5e",
        "type": "tab",
        "label": "Env Vars + System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04cc3b7b3e019683",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "@O - TimedSpeedCounts",
        "style": {
            "label": true
        },
        "nodes": [
            "35c0bee67148cfa7",
            "9496fe7a475726de",
            "617c9bb213538929",
            "526eb1967dda78c4"
        ],
        "x": 394,
        "y": 599,
        "w": 852,
        "h": 142
    },
    {
        "id": "1d00b3011a12b204",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "ON - DetectedObjectVelocity, for single object",
        "style": {
            "label": true
        },
        "nodes": [
            "4681243b9c70e906",
            "b8db51ab64a3d61e",
            "67f64c75edc0ef13"
        ],
        "x": 394,
        "y": 399,
        "w": 452,
        "h": 182
    },
    {
        "id": "8dd778b3e5d3a05c",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "listen to MQTT payloads, categorize",
        "style": {
            "label": true
        },
        "nodes": [
            "bcdcd8861df95e07",
            "9f1012eacf4d076f",
            "ed3267eeb15ef14e",
            "6cfe5662fc478c14",
            "98e23f2c38047c05"
        ],
        "x": 14,
        "y": 199,
        "w": 1112,
        "h": 222
    },
    {
        "id": "e7337074cbb5c952",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "query InfluxDB for Event+dir median DetectedObjectVelocity",
        "style": {
            "label": true
        },
        "nodes": [
            "6539eff5f28950e2",
            "d541afce049d3481",
            "e63efdd922665136",
            "0f3ff76b20f6fea0",
            "b9ec057a98fc7391",
            "29ba5f8d0c2ef420",
            "629e4b3f709f1e32",
            "be1439498cc44b59",
            "9b02f14fb1d60b89",
            "23df4abbd743c2e1",
            "823f58ae26a49321"
        ],
        "x": 14,
        "y": 459,
        "w": 1312,
        "h": 302
    },
    {
        "id": "9ee8ebd820661432",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "create Frigate /api/subLabel request to event for speed",
        "style": {
            "label": true
        },
        "nodes": [
            "031f1f21a0ab203d",
            "669e68daa73311d6",
            "1b0344bd4829de6b",
            "50574c0e9f62cf10"
        ],
        "x": 474,
        "y": 979,
        "w": 692,
        "h": 142
    },
    {
        "id": "d14033e4e7acdf1b",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "write Event+Speed to mongodb",
        "style": {
            "label": true
        },
        "nodes": [
            "400aaccc21e5eaf7",
            "078438fe6e931391",
            "b71b0fcb6d1e558c",
            "466942b727a6409c",
            "d9a2cc1e81161549"
        ],
        "x": 474,
        "y": 779,
        "w": 732,
        "h": 182
    },
    {
        "id": "e138c998bef7d520",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OS O3 - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "d5e5d0f288f9b186",
            "7b220a40adc14e3c",
            "d88af763b70480d0",
            "5f62cb744592b108"
        ],
        "x": 394,
        "y": 759,
        "w": 752,
        "h": 202
    },
    {
        "id": "5930ccb76242c558",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OC - payload, object summary+vehicle length",
        "style": {
            "label": true
        },
        "nodes": [
            "5dda1e574a7acdc9",
            "3fc9a8ed49514be5"
        ],
        "x": 394,
        "y": 1199,
        "w": 332,
        "h": 142
    },
    {
        "id": "e5b5b46703e248e9",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "OS O1 (equivalent) - payload, raw speed+magnitude",
        "style": {
            "label": true
        },
        "nodes": [
            "da47f12a5e2cd512",
            "ef9cb704c91a3ef6",
            "c1c1371cdf7151aa",
            "58e0b10c67841b60"
        ],
        "x": 394,
        "y": 979,
        "w": 792,
        "h": 202
    },
    {
        "id": "0a6e123f5e53c029",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "group mongo summary daily",
        "style": {
            "label": true
        },
        "nodes": [
            "404ac097795a2da0",
            "7d0ef920e3594875",
            "ae662d8b51bdd6b4",
            "2dc07c33aebf63da",
            "c509b1b731f83dec",
            "0d82866f7bfcb4e0",
            "b65e1877b1e04881",
            "5a74033007fa0242"
        ],
        "x": 14,
        "y": 619,
        "w": 852,
        "h": 322
    },
    {
        "id": "5aac1262472b0205",
        "type": "group",
        "z": "28627559bebdc324",
        "name": "group frigate api/events/summary",
        "style": {
            "label": true
        },
        "nodes": [
            "08d030ffc3fe6adb",
            "b241a0ef89fd7ce4",
            "91d3f8965f62f4b0",
            "921bd254e41a46da",
            "eb140f61419c6a08",
            "7d670f6e8d75b305"
        ],
        "x": 14,
        "y": 339,
        "w": 852,
        "h": 262
    },
    {
        "id": "a5d65dd0e3566daa",
        "type": "mqtt-broker",
        "name": "mqtt-broker-frigate",
        "broker": "nodered",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "73598328fc95017b",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb-node-red",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "d65c36624d553ee7",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "4b8d22be1aa15cf2",
        "type": "mongodb4-client",
        "name": "mongo-local-docker",
        "protocol": "mongodb",
        "hostname": "mongo",
        "port": "27017",
        "dbName": "tm-22",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb://mongoadmin:mongodbpass@mongo:27017/tm-21?directConnection=true&authSource=admin&appName=mongosh+2.2.0",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "d20486757aef47d3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b6d86231fb09af0f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1f15adecfe5a580a",
        "type": "ui_group",
        "name": "Default",
        "tab": "b6d86231fb09af0f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "665d947f9a312a33",
        "type": "ui_tab",
        "name": "Events",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "06dde4be9a9a6b27",
        "type": "ui_group",
        "name": "Monitor Events Dashboard",
        "tab": "665d947f9a312a33",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e43506628b4a1cdb",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "AN-10 API Interface",
        "info": "https://omnipresense.com/wp-content/uploads/2023/11/AN-010-Z_API_Interface.pdf",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "bb2b78040385d37e",
        "type": "json",
        "z": "94d07e407c25f282",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "36b68e0861cc5fc4",
                "830348149cb405ae"
            ]
        ]
    },
    {
        "id": "36b68e0861cc5fc4",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "debug-radar-all-output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "35c0bee67148cfa7",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "debug-write-radar-key-valid-TimedSpeedCounts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 640,
        "wires": []
    },
    {
        "id": "9496fe7a475726de",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "format influxdb write TimedSpeedCounts",
        "func": "\nconst newMsg = {};\n\nnewMsg.payload = [\n    {\n        speed_average: Number(msg.payload.TimedSpeedCounts.average),\n        count: Number(msg.payload.TimedSpeedCounts.count),\n        time: (msg.payload.TimedSpeedCounts.time*1000)\n    },\n    {\n        location: env.get(\"VAR_LOCATION\"),\n        direction: String(msg.payload.TimedSpeedCounts.direction),\n        speed_units: msg.payload.TimedSpeedCounts.units\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "617c9bb213538929",
                "35c0bee67148cfa7"
            ]
        ]
    },
    {
        "id": "a9d702a51bc8f0c9",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "variables to pass",
        "info": "Via Docker Environment \n- `device_ip` of Pi (for influxDB server)  --- env.get(\"VAR_DEVICE_IP\")\n- `location` string (for influxDB `location` tag)  --- env.get(\"VAR_LOCATION\")\n- `radar_camera` name of camera (for attaching speeds to events) - needs to match Frigate config  --- env.get(\"VAR_RADAR_CAMERA\")  \n- `influxdb_database`   --- env.get(\"VAR_INFLUXDB_BUCKET\")\n\n",
        "x": 360,
        "y": 60,
        "wires": []
    },
    {
        "id": "526eb1967dda78c4",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "TimedSpeedCounts are @O and @|300 (5-min)",
        "info": "",
        "x": 1020,
        "y": 700,
        "wires": []
    },
    {
        "id": "4681243b9c70e906",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "format influxdb write DetectedObjectVelocity",
        "func": "\nconst newMsg = {};\n\nnewMsg.payload = [\n    {\n        velocity: Number(msg.payload.DetectedObjectVelocity),\n        time: (msg.payload.time*1000)\n    },\n    {\n        location: env.get(\"VAR_LOCATION\"),\n        direction: String(msg.payload.direction),\n        velocity_units: msg.payload.unit\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "b8db51ab64a3d61e"
            ]
        ]
    },
    {
        "id": "affe7cfb9861e62d",
        "type": "serial in",
        "z": "94d07e407c25f282",
        "name": "receive OPS243 serial (USB - /dev/ttyACM0)",
        "serial": "d65c36624d553ee7",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "bb2b78040385d37e"
            ]
        ]
    },
    {
        "id": "8e8ede8ca221552b",
        "type": "serial out",
        "z": "94d07e407c25f282",
        "name": "send to OPS243 serial (USB)",
        "serial": "d65c36624d553ee7",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "617c9bb213538929",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb TimedSpeedCounts",
        "measurement": "TimedSpeedCounts",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "${VAR_INFLUXDB_BUCKET}",
        "x": 660,
        "y": 700,
        "wires": []
    },
    {
        "id": "b8db51ab64a3d61e",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb DetectedObjectVelocity",
        "measurement": "DetectedObjectVelocity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "${VAR_INFLUXDB_BUCKET}",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "67f64c75edc0ef13",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "debug-radar-write-DetectObjectVelocity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 440,
        "wires": []
    },
    {
        "id": "5ba75f5c9e2a85da",
        "type": "catch",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 60,
        "wires": [
            [
                "84f8c1cca4483e4c"
            ]
        ]
    },
    {
        "id": "84f8c1cca4483e4c",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "114c038c504f9f87",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "query all settings, after 0.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "\"?P\" & \"?N\" & \"?V\" & \"?B\" & \"??\" & \"O?\" & \"?F\" & \"?s\"",
        "payloadType": "jsonata",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "d30801432e1972b3",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar time (in seconds), after 0.2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "\"C=\" & $ceil($millis()/1000) & \"\\n\"",
        "payloadType": "jsonata",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "93dfd24a4e45dbb9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar timezone, after 0.3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "\"CZ\" & \"PST-7\" & \"\\n\"",
        "payloadType": "jsonata",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "b965ece6f3bd3377",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: base settings and filters, after 0.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"OJUSF2S2K+IGONO3OUOTOhOC\" & \"OMM>20\\n\" & \"OSR>5\\n\" & \"@O@|300\\n\" & \"A!\" ",
        "payloadType": "jsonata",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "73c028a0006c9cd9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PI, idle power mode for settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"PI\"",
        "payloadType": "jsonata",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "efddf78e690358fc",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PA, active power mode after settings, after 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "\"PA\"",
        "payloadType": "jsonata",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "78f9e09b02db0b2c",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: save settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "\"A!\"",
        "payloadType": "jsonata",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "830348149cb405ae",
        "type": "switch",
        "z": "94d07e407c25f282",
        "name": "radar payload key type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "DetectedObjectVelocity",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "TimedSpeedCounts",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "speed",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "delta_time_msec",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "4681243b9c70e906",
                "67f64c75edc0ef13"
            ],
            [
                "9496fe7a475726de"
            ],
            [
                "7b220a40adc14e3c",
                "ef9cb704c91a3ef6"
            ],
            [
                "5dda1e574a7acdc9",
                "3fc9a8ed49514be5"
            ]
        ]
    },
    {
        "id": "d5e5d0f288f9b186",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb RawSpeedMagnitude",
        "measurement": "RawSpeedMagnitude",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "${VAR_INFLUXDB_BUCKET}",
        "x": 660,
        "y": 860,
        "wires": []
    },
    {
        "id": "7b220a40adc14e3c",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "format influxdb write raw speed, magnitude",
        "func": "var thisDirection = msg.payload.speed > 0 ? \"inbound\" : \"outbound\";\n\nconst newMsg = {};\n\nnewMsg.payload = [\n    {  //first object holds _field (speed_unit:value, magnitude:value)\n        speed: String(msg.payload.speed),\n        magnitude: String(msg.payload.magnitude),\n        time: (msg.payload.time*1000)\n    },\n    { //second object holds tags\n        location: env.get(\"VAR_LOCATION\"),\n        direction: thisDirection,\n        speed_units: msg.payload.unit\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 800,
        "wires": [
            [
                "d5e5d0f288f9b186",
                "d88af763b70480d0"
            ]
        ]
    },
    {
        "id": "d88af763b70480d0",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "debug-radar-raws-speeds-write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 800,
        "wires": []
    },
    {
        "id": "5f62cb744592b108",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "handle O3 speeds by saving array to each _value",
        "info": "",
        "x": 600,
        "y": 920,
        "wires": []
    },
    {
        "id": "5dda1e574a7acdc9",
        "type": "mongodb4",
        "z": "94d07e407c25f282",
        "g": "5930ccb76242c558",
        "clientNode": "4b8d22be1aa15cf2",
        "mode": "collection",
        "collection": "radar_oc_payloads",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "mongo insertOne radar_oc_payload",
        "x": 560,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "3fc9a8ed49514be5",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "5930ccb76242c558",
        "name": "mongo radar_oc_payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "da47f12a5e2cd512",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb RawSpeedMagnitude_single",
        "measurement": "RawSpeedMagnitude_single",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "${VAR_INFLUXDB_BUCKET}",
        "x": 690,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ef9cb704c91a3ef6",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "format influxdb write raw speed, magnitude single",
        "func": "var thisDirection = msg.payload.speed > 0 ? \"inbound\" : \"outbound\";\n\nconst newMsg = {};\n\nnewMsg.payload = [\n    {  //first object holds _field (speed_unit:value, magnitude:value)\n        speed: String(msg.payload.speed[0]),\n        magnitude: String(msg.payload.magnitude[0]),\n        time: (msg.payload.time*1000)\n    },\n    { //second object holds tags\n        location: env.get(\"VAR_LOCATION\"),\n        direction: thisDirection,\n        speed_units: msg.payload.unit\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "da47f12a5e2cd512",
                "c1c1371cdf7151aa"
            ]
        ]
    },
    {
        "id": "c1c1371cdf7151aa",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "debug-radar-raws-speeds-write_single",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1020,
        "wires": []
    },
    {
        "id": "58e0b10c67841b60",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "e5b5b46703e248e9",
        "name": "manually take top 1 speed, magnitude (effectively O1)",
        "info": "",
        "x": 620,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6c2d22f0a8cb1fc1",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: Broker status events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd148029fe6bee47",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: broker publish events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 80,
        "wires": []
    },
    {
        "id": "038275ccb8bafbb0",
        "type": "mqtt in",
        "z": "49e416bfab1d4055",
        "name": "",
        "topic": "frigate/events",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a5d65dd0e3566daa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 140,
        "wires": [
            [
                "4a1c5b87abde2112",
                "bcdcd8861df95e07"
            ]
        ]
    },
    {
        "id": "4a1c5b87abde2112",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: published frigate messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 140,
        "wires": []
    },
    {
        "id": "1720d60a87cfb2d7",
        "type": "aedes broker",
        "z": "49e416bfab1d4055",
        "name": "frigate-local",
        "mqtt_port": "1883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 90,
        "y": 60,
        "wires": [
            [
                "6c2d22f0a8cb1fc1"
            ],
            [
                "fd148029fe6bee47"
            ]
        ]
    },
    {
        "id": "bcdcd8861df95e07",
        "type": "switch",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "payload.type == \"end\"",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "ed3267eeb15ef14e"
            ]
        ]
    },
    {
        "id": "6cfe5662fc478c14",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "calculate direction based on frigate event zones",
        "func": "var $myZoneNearIndex = msg.payload.after.entered_zones.indexOf(\"zone_near\");\nvar $myZoneFarIndex = msg.payload.after.entered_zones.indexOf(\"zone_far\");\n\nvar $myDirection = ($myZoneNearIndex >= 0 && $myZoneNearIndex >= 0) ? ($myZoneFarIndex < $myZoneNearIndex ? \"inbound\" : \"outbound\") : undefined;\n\nmsg.payload.after.nr_direction = $myDirection;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "9f1012eacf4d076f",
                "0f3ff76b20f6fea0",
                "629e4b3f709f1e32",
                "9b02f14fb1d60b89"
            ]
        ]
    },
    {
        "id": "9f1012eacf4d076f",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "debug: calc direction",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 380,
        "wires": []
    },
    {
        "id": "6539eff5f28950e2",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "create influxdb query, return DetectedObjectVelocity median",
        "func": "var query = \"\";\n\nquery += \"from(bucket: \\\"\" + env.get(\"VAR_INFLUXDB_BUCKET\") +\"\\\")\\n\";\nquery += \"    |> range(start: \" + (Math.floor(msg.payload.after.start_time)-2) +\", stop: \" + (Math.ceil(msg.payload.after.end_time)+2) + \")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"DetectedObjectVelocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"velocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"location\\\"] == \\\"\" + env.get(\"VAR_LOCATION\") + \"\\\")\\n\";\nquery += \"    |> median(column: \\\"_value\\\")\\n\"; \n\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 600,
        "wires": [
            [
                "d541afce049d3481"
            ]
        ]
    },
    {
        "id": "d541afce049d3481",
        "type": "influxdb in",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "influxdb": "73598328fc95017b",
        "name": "query, DetectedObjectVelocity, median",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "taffic_monitor_01",
        "x": 430,
        "y": 660,
        "wires": [
            [
                "29ba5f8d0c2ef420"
            ]
        ]
    },
    {
        "id": "031f1f21a0ab203d",
        "type": "http request",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "9ee8ebd820661432",
        "name": "add subLabel to event",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://{{{frigate_ip}}}:5000/api/events/{{{event_id}}}/sub_label",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1080,
        "wires": [
            [
                "50574c0e9f62cf10"
            ]
        ]
    },
    {
        "id": "0f3ff76b20f6fea0",
        "type": "join",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "join Event+Radar",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "e63efdd922665136"
            ]
        ],
        "info": "# Sample Output:\n\n```\n{\n    \"topic\": \"query_return\",\n    \"payload\": {\n        \"event_end_car_bike\": {\n            \"before\": {\n                \"id\": \"1712153303.328575-u22ucl\",\n                \"camera\": \"picam_h264\",\n                \"frame_time\": 1712153456.913404,\n                \"snapshot\": {\n                    \"frame_time\": 1712153453.713148,\n                    \"box\": [\n                        842,\n                        253,\n                        2131,\n                        897\n                    ],\n                    \"area\": 830116,\n                    \"region\": [\n                        592,\n                        0,\n                        2304,\n                        1712\n                    ],\n                    \"score\": 0.8046875,\n                    \"attributes\": []\n                },\n                \"label\": \"car\",\n                \"sub_label\": null,\n                \"top_score\": 0.80859375,\n                \"false_positive\": false,\n                \"start_time\": 1712153303.328575,\n                \"end_time\": null,\n                \"score\": 0.796875,\n                \"box\": [\n                    365,\n                    197,\n                    1008,\n                    533\n                ],\n                \"area\": 216048,\n                \"ratio\": 1.9136904761904763,\n                \"region\": [\n                    301,\n                    0,\n                    1057,\n                    756\n                ],\n                \"stationary\": false,\n                \"motionless_count\": 2,\n                \"position_changes\": 2,\n                \"current_zones\": [],\n                \"entered_zones\": [\n                    \"zone_near\",\n                    \"zone_far\"\n                ],\n                \"has_clip\": true,\n                \"has_snapshot\": true,\n                \"attributes\": {},\n                \"current_attributes\": []\n            },\n            \"after\": {\n                \"id\": \"1712153303.328575-u22ucl\",\n                \"camera\": \"picam_h264\",\n                \"frame_time\": 1712153469.448711,\n                \"snapshot\": {\n                    \"frame_time\": 1712153453.713148,\n                    \"box\": [\n                        842,\n                        253,\n                        2131,\n                        897\n                    ],\n                    \"area\": 830116,\n                    \"region\": [\n                        592,\n                        0,\n                        2304,\n                        1712\n                    ],\n                    \"score\": 0.8046875,\n                    \"attributes\": []\n                },\n                \"label\": \"car\",\n                \"sub_label\": null,\n                \"top_score\": 0.80859375,\n                \"false_positive\": false,\n                \"start_time\": 1712153303.328575,\n                \"end_time\": 1712153474.711017,\n                \"score\": 0.6171875,\n                \"box\": [\n                    0,\n                    341,\n                    70,\n                    441\n                ],\n                \"area\": 7000,\n                \"ratio\": 0.7,\n                \"region\": [\n                    0,\n                    188,\n                    428,\n                    616\n                ],\n                \"stationary\": false,\n                \"motionless_count\": 0,\n                \"position_changes\": 2,\n                \"current_zones\": [],\n                \"entered_zones\": [\n                    \"zone_near\",\n                    \"zone_far\"\n                ],\n                \"has_clip\": true,\n                \"has_snapshot\": true,\n                \"attributes\": {},\n                \"current_attributes\": [],\n                \"nr_direction\": \"outbound\"\n            },\n            \"type\": \"end\"\n        },\n        \"query_return\": [\n            {\n                \"result\": \"_result\",\n                \"table\": 0,\n                \"_start\": \"2024-04-03T14:08:21Z\",\n                \"_stop\": \"2024-04-03T14:11:17Z\",\n                \"_field\": \"velocity\",\n                \"_measurement\": \"DetectedObjectVelocity\",\n                \"direction\": \"outbound\",\n                \"location\": \"ne26th-wasco-sb-01\",\n                \"units\": \"mph\",\n                \"_value\": -8\n            }\n        ]\n    },\n    \"qos\": 0,\n    \"retain\": false,\n    \"_msgid\": \"19500feb8926f41d\",\n    \"query\": \"from(bucket: \\\"tm-05\\\")\\n    |> range(start: 1712153301, stop: 1712153477)\\n    |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"DetectedObjectVelocity\\\")\\n    |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"velocity\\\")\\n    |> filter(fn: (r) => r[\\\"direction\\\"] == \\\"outbound\\\")\\n    |> filter(fn: (r) => r[\\\"location\\\"] == \\\"ne26th-wasco-sb-01\\\")\\n    |> filter(fn: (r) => r[\\\"units\\\"] == \\\"mph\\\")\\n    |> median(column: \\\"_value\\\")\\n\"\n}\n```"
    },
    {
        "id": "e63efdd922665136",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "match Event+Radar direction",
        "func": "//if only 1 Radar.direction USE THAT\nif (msg.payload.query_return_median.length == 1) {\n    //  check if Event.nr_direction MATCHES Radar.direction THEN good\n    if (msg.payload.frigate_event.after.nr_direction == msg.payload.query_return_median[0].direction) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.frigate_event.after.nr_direction;\n        msg.speed_match = msg.payload.query_return_median[0]._value;\n    }\n    //  if Event.nr_direction == undefined THEN use 1 that came through radar \n    else if (msg.payload.frigate_event.after.nr_direction == undefined) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.query_return_median[0].direction;\n        msg.speed_match = msg.payload.query_return_median[0]._value;\n    }\n}\n//  multiple radar directions, but if Event.nr_direction MATCHES Radar.direction THEN good\nelse if ((msg.payload.query_return_median.length > 1)\n    && (msg.payload.frigate_event.after.nr_direction != undefined)) {\n\n    //find matching median value to frigate_event\n    var dirIndex = msg.payload.query_return_median.map((o) => o.direction).indexOf(msg.payload.frigate_event.after.nr_direction);\n    if (dirIndex >= 0) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.query_return_median[dirIndex].direction;\n        msg.speed_match = msg.payload.query_return_median[dirIndex]._value;\n    }\n    else {\n        msg.dir_speed_status = \"direction_speed_no_match\";\n        msg.direction_match = undefined;\n        msg.speed_match = undefined;\n    }\n}\n//      if == 0 Radar.direction DO NOT REPORT\nelse {\n        msg.dir_speed_status = \"direction_speed_no_match\"; \n        msg.direction_match = undefined;\n        msg.speed_match = undefined;\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 640,
        "wires": [
            [
                "b9ec057a98fc7391",
                "b71b0fcb6d1e558c"
            ]
        ]
    },
    {
        "id": "669e68daa73311d6",
        "type": "function",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "9ee8ebd820661432",
        "name": "create subLabel message",
        "func": "var newMsg = {};\n\nnewMsg.event_id = msg.payload.frigate_event.after.id;\nnewMsg.frigate_ip = env.get(\"VAR_DEVICE_IP\");\n\nnewMsg.payload = {\n    \"subLabel\": String(\"speed_\" + msg.direction_match), \n    \"subLabelScore\": (Math.abs(msg.speed_match)/1000)\n    };\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "1b0344bd4829de6b",
                "031f1f21a0ab203d"
            ]
        ]
    },
    {
        "id": "1b0344bd4829de6b",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "9ee8ebd820661432",
        "name": "subLabel complete message to send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1020,
        "wires": []
    },
    {
        "id": "50574c0e9f62cf10",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "9ee8ebd820661432",
        "name": "frigate return, event speed sub_label",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1080,
        "wires": []
    },
    {
        "id": "400aaccc21e5eaf7",
        "type": "mongodb4",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "clientNode": "4b8d22be1aa15cf2",
        "mode": "collection",
        "collection": "events",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "mongo insertOne events",
        "x": 750,
        "y": 920,
        "wires": [
            [
                "078438fe6e931391"
            ]
        ]
    },
    {
        "id": "078438fe6e931391",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "mongo return",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 920,
        "wires": []
    },
    {
        "id": "b71b0fcb6d1e558c",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "create mongo message",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\nnewMsg.payload = {}; // single collection of strings\n//newMsg.payload.radar = {}; // contain all desired radar readings\n//Don't attach radar data here... Just conflates the reporting DB\n\n// Frigate Event info\nnewMsg.payload.id = msg.payload.frigate_event.after.id;\nnewMsg.payload.camera = msg.payload.frigate_event.after.camera;\nnewMsg.payload.label = msg.payload.frigate_event.after.label;\nnewMsg.payload.sub_label = msg.payload.frigate_event.after.sub_label;\nnewMsg.payload.top_score = msg.payload.frigate_event.after.top_score;\n\n//for Timestamp, Mongo prefers MILLISECONDS (frigate event and radar uses seconds)\nnewMsg.payload.frame_time = msg.payload.frigate_event.after.frame_time;\nnewMsg.payload.start_time = msg.payload.frigate_event.after.start_time;\nnewMsg.payload.end_time = msg.payload.frigate_event.after.end_time;\n\nnewMsg.payload.entered_zones = msg.payload.frigate_event.after.entered_zones; //array\nnewMsg.payload.direction_calc = msg.direction_match;\nnewMsg.payload.speed_calc = msg.speed_match;\nnewMsg.payload.thumbnail_base64jpg = msg.payload.event_api.thumbnail;\n\n// Attached Radar info\n\n//newMsg.payload.radar.query_return_median = msg.payload.query_return_median[0];\n\n//newMsg.payload.radar.query_return_nonagg = msg.payload.query_return_nonagg;\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 860,
        "wires": [
            [
                "466942b727a6409c",
                "400aaccc21e5eaf7",
                "d9a2cc1e81161549"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "466942b727a6409c",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "composed mongo message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 860,
        "wires": []
    },
    {
        "id": "b9ec057a98fc7391",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "event+radar w direction calcs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 700,
        "wires": []
    },
    {
        "id": "29ba5f8d0c2ef420",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "add topic, `query_return_median`",
        "func": "msg.topic = \"query_return_median\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "23df4abbd743c2e1"
            ]
        ]
    },
    {
        "id": "629e4b3f709f1e32",
        "type": "http request",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "frigate http /api/events/id",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/events/{{{payload.after.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "be1439498cc44b59"
            ]
        ]
    },
    {
        "id": "be1439498cc44b59",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "add topic, `event_api`",
        "func": "msg.topic = \"event_api\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 500,
        "wires": [
            [
                "0f3ff76b20f6fea0"
            ]
        ]
    },
    {
        "id": "7c030508e545444c",
        "type": "catch",
        "z": "49e416bfab1d4055",
        "name": "catch - flow-mqtt",
        "scope": null,
        "uncaught": false,
        "x": 680,
        "y": 40,
        "wires": [
            [
                "ace98a4209f56f19"
            ]
        ]
    },
    {
        "id": "ace98a4209f56f19",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "catch - flow-mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "ed3267eeb15ef14e",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "add topic = 'frigate_event'",
        "func": "msg.topic = \"frigate_event\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 320,
        "wires": [
            [
                "98e23f2c38047c05"
            ]
        ]
    },
    {
        "id": "9b02f14fb1d60b89",
        "type": "switch",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "redirect based on label (car, bicycle, motorcycle)",
        "property": "payload.after.label",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "car",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bicycle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "motorcycle",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 220,
        "y": 520,
        "wires": [
            [
                "6539eff5f28950e2"
            ],
            [
                "6539eff5f28950e2"
            ],
            [
                "6539eff5f28950e2"
            ],
            [
                "23df4abbd743c2e1"
            ]
        ]
    },
    {
        "id": "98e23f2c38047c05",
        "type": "delay",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "delay 1 sec, to be sure InfluxDB writes",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 380,
        "wires": [
            [
                "6cfe5662fc478c14"
            ]
        ]
    },
    {
        "id": "23df4abbd743c2e1",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "pass query otherwise empty set",
        "func": "var newMsg = {};\nif (msg.topic == \"query_return_median\") {return msg} \nelse {\n    newMsg.topic = \"query_return_median\";\n    newMsg.payload = {};\n    newMsg.payload.query_return_median = [];\n    return newMsg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 540,
        "wires": [
            [
                "0f3ff76b20f6fea0"
            ]
        ]
    },
    {
        "id": "823f58ae26a49321",
        "type": "comment",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "add Event Zone for \"radar zone\" ",
        "info": "",
        "x": 750,
        "y": 580,
        "wires": []
    },
    {
        "id": "d9a2cc1e81161549",
        "type": "link out",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "to dashboard",
        "mode": "link",
        "links": [
            "c249329109ac17d5"
        ],
        "x": 775,
        "y": 820,
        "wires": []
    },
    {
        "id": "8cee82669b6b8512",
        "type": "comment",
        "z": "90d5c925f9fbf9fd",
        "name": "capture bluetooth to influxdb",
        "info": "",
        "x": 220,
        "y": 140,
        "wires": []
    },
    {
        "id": "3985037239b671c5",
        "type": "inject",
        "z": "28627559bebdc324",
        "name": "trigger Event query every 1-hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "1a74cb68f1228a4f"
            ]
        ]
    },
    {
        "id": "431a4f7307387f3f",
        "type": "mongodb4",
        "z": "28627559bebdc324",
        "clientNode": "4b8d22be1aa15cf2",
        "mode": "collection",
        "collection": "events",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "mongo query Events, count 1-hour",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "2958d18a1e112409",
                "b8b25338f2f57f93"
            ]
        ]
    },
    {
        "id": "1a74cb68f1228a4f",
        "type": "function",
        "z": "28627559bebdc324",
        "name": "create payload, 1-hour counts",
        "func": "//for Timestamp, Mongo prefers MILLISECONDS (frigate event and radar uses seconds)\n\nvar newMsg = {};\nconst query = [{\n    $group: {\n        _id: {label_object: \"$label\",\n            frame_time_trunc: {$dateTrunc: {date: { $toDate: { $multiply: [\"$frame_time\", 1000]}}, unit: \"hour\", binSize: 1}}\n        },\n        count: {$count: {}}\n    }\n}];\n\nconst options = [{\n    $sort: {\n        frame_time_trunc: -1,\n        label_object: 1\n    }\n}];\n\nnewMsg.payload = [query, options]\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "431a4f7307387f3f"
            ]
        ]
    },
    {
        "id": "2958d18a1e112409",
        "type": "debug",
        "z": "28627559bebdc324",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 220,
        "wires": []
    },
    {
        "id": "08d030ffc3fe6adb",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "frigate api/events/summary object count by day",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b25338f2f57f93",
        "type": "function",
        "z": "28627559bebdc324",
        "name": "function 1",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = {};\n\nnewMsg.payload = [{\n    \"series\": [\"car\",\"bicycle\", \"person\"]\n}]\n\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b241a0ef89fd7ce4",
        "type": "http request",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "frigate api/events/summary - Daily summary",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://frigate:5000/api/events/summary",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "921bd254e41a46da",
                "eb140f61419c6a08"
            ]
        ],
        "info": "`{\"camera\":\"picam_gs_h264\",\n\"count\":83,\"day\":\"2024-03-21\",\n\"label\":\"bicycle\",\n\"sub_label\":null,\n\"zones\":[]}`"
    },
    {
        "id": "91d3f8965f62f4b0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "trigger summary Event query every 2-hours",
        "props": [],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 230,
        "y": 380,
        "wires": [
            [
                "b241a0ef89fd7ce4"
            ]
        ]
    },
    {
        "id": "921bd254e41a46da",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb140f61419c6a08",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "structure frigate api/summary",
        "func": "var newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //only do this for the radar camera\n    if (myItem.camera == env.get(\"VAR_RADAR_CAMERA\")) {\n        //if label doesn't exist, push it\n        if (newMsg[0].series.indexOf(myItem.label) < 0) {\n            newMsg[0].series.push(myItem.label);\n            //create new data array element that matches the series index\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)] = [];\n        }\n\n        //Check if it's a new date or existing in data[0][0].x\n        //datapoint for date \n        let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].findIndex((element) => element.x == String(new Date(myItem.day)));\n        if (xIndex < 0) {\n            //new date\n            let thisDataPoint = {};\n            thisDataPoint.x = new Date(myItem.day);\n            thisDataPoint.y = myItem.count;\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)].push(thisDataPoint);\n        }\n        else {\n            //date exists, sum counts\n            newMsg[0].data[newMsg[0].series.indexOf(myItem.label)][xIndex].y += myItem.count;\n        }\n\n    };\n    \n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "08d030ffc3fe6adb",
                "7d670f6e8d75b305"
            ]
        ]
    },
    {
        "id": "7d670f6e8d75b305",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "5aac1262472b0205",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 560,
        "wires": []
    },
    {
        "id": "404ac097795a2da0",
        "type": "inject",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "trigger Event query every 2-hours",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7200",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 660,
        "wires": [
            [
                "ae662d8b51bdd6b4"
            ]
        ]
    },
    {
        "id": "7d0ef920e3594875",
        "type": "mongodb4",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "clientNode": "4b8d22be1aa15cf2",
        "mode": "collection",
        "collection": "events",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "query mongo events, daily summary",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "c509b1b731f83dec",
                "0d82866f7bfcb4e0"
            ]
        ]
    },
    {
        "id": "ae662d8b51bdd6b4",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "create mongo query, daily summary",
        "func": "//for Timestamp, Mongo prefers MILLISECONDS (frigate event and radar uses seconds)\n\nvar newMsg = {};\nconst query = [\n    {\n        $match: {\n            frame_time: {\n                $gte: Math.floor((Date.now() - 86400000 * 10) / 1000) //change to seconds, 10 days ago, e.g. 1713638656\n            },\n            camera: env.get(\"VAR_RADAR_CAMERA\") //only do this for radar camera\n        }\n    },\n    {\n        $group: {\n            _id: {\n                label: \"$label\",\n                day: { $dateTrunc: { date: { $toDate: { $multiply: [\"$frame_time\", 1000] } }, unit: \"day\", binSize: 1 } },\n                camera: \"$camera\"\n            },\n            count: { $count: {} }\n        }\n    },\n    {\n        $sort: {\n            \"_id.label\": 1,\n            \"_id.day\": 1\n        }\n    }\n];\n\nnewMsg.payload = [query]\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 720,
        "wires": [
            [
                "7d0ef920e3594875",
                "2dc07c33aebf63da"
            ]
        ]
    },
    {
        "id": "2dc07c33aebf63da",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 720,
        "wires": []
    },
    {
        "id": "c509b1b731f83dec",
        "type": "function",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "structure mongo summary",
        "func": "//https://github.com/node-red/node-red-dashboard/blob/master/Charts.md\n//Array of Object with keys of series, data=x:ts,y:count, labels\n\nvar newMsg = [{}];\nnewMsg[0].series = [];\nnewMsg[0].data = [];\nnewMsg[0].label = [];\n\nmsg.payload.forEach((myItem) => {\n\n    //only do this for the radar camera\n    if (myItem._id.camera == env.get(\"VAR_RADAR_CAMERA\")) {\n        //if label doesn't exist, push it\n        if (newMsg[0].series.indexOf(myItem._id.label) < 0) {\n            newMsg[0].series.push(myItem._id.label);\n            //create new data array element that matches the series index\n            newMsg[0].data[newMsg[0].series.indexOf(myItem._id.label)] = [];\n        }\n\n        //Check if it's a new date or existing in data[0][0].x\n        //datapoint for date \n        let xIndex = newMsg[0].data[newMsg[0].series.indexOf(myItem._id.label)].findIndex((element) => element.x == String(new Date(myItem._id.day)));\n        if (xIndex < 0) {\n            //new date\n            let thisDataPoint = {};\n            thisDataPoint.x = new Date(myItem._id.day);\n            thisDataPoint.y = myItem.count;\n            newMsg[0].data[newMsg[0].series.indexOf(myItem._id.label)].push(thisDataPoint);\n        }\n        else {\n            //date exists, sum counts\n            newMsg[0].data[newMsg[0].series.indexOf(myItem._id.label)][xIndex].y += myItem.count;\n        }\n\n    };\n    \n});\n\nmsg.payload = newMsg;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "b65e1877b1e04881",
                "5a74033007fa0242"
            ]
        ]
    },
    {
        "id": "0d82866f7bfcb4e0",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 780,
        "wires": []
    },
    {
        "id": "b65e1877b1e04881",
        "type": "ui_chart",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "mongo summary daily, objects",
        "group": "06dde4be9a9a6b27",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "frigate api/events/summary object count by day",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "10000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5a74033007fa0242",
        "type": "debug",
        "z": "28627559bebdc324",
        "g": "0a6e123f5e53c029",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 900,
        "wires": []
    },
    {
        "id": "c249329109ac17d5",
        "type": "link in",
        "z": "28627559bebdc324",
        "name": "from mongo event capture",
        "links": [
            "d9a2cc1e81161549"
        ],
        "x": 175,
        "y": 1000,
        "wires": [
            [
                "5ec2d3ba52f944f5"
            ]
        ]
    },
    {
        "id": "d66541089b01306e",
        "type": "switch",
        "z": "28627559bebdc324",
        "name": "event has speed",
        "property": "payload.speed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "c788d632f5e93a73"
            ]
        ]
    },
    {
        "id": "2e680914d7da5c94",
        "type": "switch",
        "z": "28627559bebdc324",
        "name": "any radar event",
        "property": "payload.zones",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zone_radar",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 1060,
        "wires": [
            [
                "e5391514131a2b5a"
            ]
        ]
    },
    {
        "id": "c788d632f5e93a73",
        "type": "function",
        "z": "28627559bebdc324",
        "name": "store last N radar events",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_radar\") || [];\n//Keep only last X elements\nvar myArrLength = 3;\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\nflow.set(\"events_recent_radar\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1000,
        "wires": [
            [
                "a47b9d9801bde446"
            ]
        ]
    },
    {
        "id": "e5391514131a2b5a",
        "type": "function",
        "z": "28627559bebdc324",
        "name": "store last N high speeds",
        "func": "//events_recent_radar should show the last N events where payload.entered_zones CONTAINS zone_radar\n\nvar myEvents = flow.get(\"events_recent_highspeed\") || [];\n//Keep only last X elements\nvar myArrLength = 3;\n\nif (myEvents.length >= myArrLength) {\n    //remove first element (oldest event)\n    myEvents.shift();\n}\n\n//add current event to end of array\nmyEvents.push(msg.payload);\n\nflow.set(\"events_recent_highspeed\", myEvents);\n\nmsg.payload = myEvents;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nif (flow.get(\"events_recent_radar\") === undefined) {\n    flow.set(\"events_recent_radar\", [])\n}\n",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1060,
        "wires": [
            [
                "6ccef1eff1e3d1ff"
            ]
        ]
    },
    {
        "id": "5ec2d3ba52f944f5",
        "type": "switch",
        "z": "28627559bebdc324",
        "name": "only use radar cam",
        "property": "payload.camera",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "\"VAR_RADAR_CAMERA\"",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 1000,
        "wires": [
            [
                "d66541089b01306e",
                "2e680914d7da5c94"
            ]
        ]
    },
    {
        "id": "a47b9d9801bde446",
        "type": "debug",
        "z": "28627559bebdc324",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 940,
        "wires": []
    },
    {
        "id": "6ccef1eff1e3d1ff",
        "type": "debug",
        "z": "28627559bebdc324",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c36c71706e494b5e",
        "type": "ui_template",
        "z": "28627559bebdc324",
        "group": "06dde4be9a9a6b27",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e9da260ad8a83698",
        "type": "ui_form",
        "z": "239d7b3ba410ad5e",
        "name": "",
        "label": "",
        "group": "1f15adecfe5a580a",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Location Description",
                "value": "loc",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Radar Camera",
                "value": "camradar",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "InfluxDB Bucket Name",
                "value": "influxbucket",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "RPi IP Address",
                "value": "rpiaddress",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "loc": "",
            "camradar": "",
            "influxbucket": "",
            "rpiaddress": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 150,
        "y": 100,
        "wires": [
            []
        ]
    }
]