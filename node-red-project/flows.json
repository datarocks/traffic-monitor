[
    {
        "id": "94d07e407c25f282",
        "type": "tab",
        "label": "flow-radar-01",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "49e416bfab1d4055",
        "type": "tab",
        "label": "Frigate MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90d5c925f9fbf9fd",
        "type": "tab",
        "label": "Aux data capture",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "28627559bebdc324",
        "type": "tab",
        "label": "Event+Speed Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "239d7b3ba410ad5e",
        "type": "tab",
        "label": "Env Vars + System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1fd8135.0c3c98",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "dfb183f3.faeb4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 320,
                "wires": [
                    {
                        "id": "10e682f6.b25e1d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "04cc3b7b3e019683",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "TimedSpeedCounts records",
        "style": {
            "label": true
        },
        "nodes": [
            "35c0bee67148cfa7",
            "9496fe7a475726de",
            "617c9bb213538929",
            "526eb1967dda78c4"
        ],
        "x": 394,
        "y": 599,
        "w": 852,
        "h": 142
    },
    {
        "id": "1d00b3011a12b204",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "DetectedObjectVelocity records",
        "style": {
            "label": true
        },
        "nodes": [
            "4681243b9c70e906",
            "b8db51ab64a3d61e",
            "67f64c75edc0ef13"
        ],
        "x": 394,
        "y": 439,
        "w": 812,
        "h": 142
    },
    {
        "id": "8dd778b3e5d3a05c",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "listen to MQTT payloads, categorize",
        "style": {
            "label": true
        },
        "nodes": [
            "bcdcd8861df95e07",
            "67f433ccd5912ebd",
            "6cfe5662fc478c14",
            "9f1012eacf4d076f"
        ],
        "x": 34,
        "y": 259,
        "w": 612,
        "h": 222
    },
    {
        "id": "e7337074cbb5c952",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "query InfluxDB for Event+dir median DetectedObjectVelocity",
        "style": {
            "label": true
        },
        "nodes": [
            "6539eff5f28950e2",
            "d541afce049d3481",
            "e63efdd922665136",
            "0f3ff76b20f6fea0",
            "b9ec057a98fc7391",
            "29ba5f8d0c2ef420",
            "629e4b3f709f1e32",
            "be1439498cc44b59"
        ],
        "x": 94,
        "y": 519,
        "w": 1112,
        "h": 262
    },
    {
        "id": "9ee8ebd820661432",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "create Frigate /api/subLabel request to event for speed",
        "style": {
            "label": true
        },
        "nodes": [
            "031f1f21a0ab203d",
            "669e68daa73311d6",
            "1b0344bd4829de6b",
            "50574c0e9f62cf10"
        ],
        "x": 874,
        "y": 1039,
        "w": 692,
        "h": 142
    },
    {
        "id": "d14033e4e7acdf1b",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "write to mongodb",
        "style": {
            "label": true
        },
        "nodes": [
            "400aaccc21e5eaf7",
            "078438fe6e931391",
            "b71b0fcb6d1e558c",
            "466942b727a6409c"
        ],
        "x": 874,
        "y": 839,
        "w": 732,
        "h": 142
    },
    {
        "id": "33bbc9893e1eae0e",
        "type": "group",
        "z": "49e416bfab1d4055",
        "name": "NOT USED query non-agregate InfluxDB",
        "style": {
            "label": true
        },
        "nodes": [
            "065e571efca99657",
            "5cd8c1f5d6326bf1",
            "34e3fdd428d4761c"
        ],
        "x": 94,
        "y": 839,
        "w": 692,
        "h": 202
    },
    {
        "id": "e138c998bef7d520",
        "type": "group",
        "z": "94d07e407c25f282",
        "name": "Raw speed records",
        "style": {
            "label": true
        },
        "nodes": [
            "d5e5d0f288f9b186",
            "7b220a40adc14e3c",
            "d88af763b70480d0",
            "5f62cb744592b108"
        ],
        "x": 394,
        "y": 779,
        "w": 752,
        "h": 202
    },
    {
        "id": "a5d65dd0e3566daa",
        "type": "mqtt-broker",
        "name": "mqtt-broker-frigate",
        "broker": "10.10.10.223",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "73598328fc95017b",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb-node-red",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://10.10.10.223:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "d65c36624d553ee7",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyACM0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "500"
    },
    {
        "id": "4b8d22be1aa15cf2",
        "type": "mongodb4-client",
        "name": "mongo-local-docker",
        "protocol": "mongodb",
        "hostname": "10.10.10.223",
        "port": "27017",
        "dbName": "tm-22",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "mongodb://mongoadmin:mongodbpass@10.10.10.223:27017/tm-21?directConnection=true&authSource=admin&appName=mongosh+2.2.0",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "b24572c.f46531",
        "type": "change",
        "z": "e1fd8135.0c3c98",
        "name": "mi-clear",
        "rules": [
            {
                "t": "set",
                "p": "player",
                "pt": "global",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{\"icon\":\"mi-clear\",\"bgcolor\":\"#FF4444\"}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 100,
        "wires": [
            [
                "94219e5b.949e7"
            ]
        ]
    },
    {
        "id": "f983ea23.268478",
        "type": "switch",
        "z": "e1fd8135.0c3c98",
        "name": "Player 1 or 2",
        "property": "player",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "b24572c.f46531"
            ],
            [
                "f5db7ec0.bab29"
            ]
        ]
    },
    {
        "id": "f5db7ec0.bab29",
        "type": "change",
        "z": "e1fd8135.0c3c98",
        "name": "mi-clear",
        "rules": [
            {
                "t": "set",
                "p": "player",
                "pt": "global",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "ui_control",
                "pt": "msg",
                "to": "{ \"icon\":\"mi-lens\" }",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "color",
                "pt": "msg",
                "to": "blue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "94219e5b.949e7"
            ]
        ]
    },
    {
        "id": "10e682f6.b25e1d",
        "type": "function",
        "z": "e1fd8135.0c3c98",
        "name": "Check for Winner",
        "func": "// b [r][c] r=row c= column\n\nmsg.payload = \"no winner yet\"\nvar b = global.get(\"board\")\n\n//node.warn(\"b = \"+b)\n//node.warn(\"b[0][0] = \"+b[0][0])\n//node.warn(\"b[0][1] = \"+b[0][1])\n//node.warn(\"b[0][2] = \"+b[0][2])\nvar tt =b[0][0] + b[0][1] + b[0][2]\n//node.warn(\"tt = \"+tt)\n// ----------------------------------------------------------\n// check to see if all squares used - draw unless someone won\nvar t = 0\nfor (r=0; r<3; r++){\n    for (c=0; c<3; c++){\n        t += b[r][c]\n    }\n}\n//node.warn(\"total = \"+t)\nif (t == 13) msg.payload = \"It's a draw\"\n\n// ----------------------------------------------------------\n// Check to see if X wins \n// Check row 1 - 3\nif ((b[0][0] + b[0][1] + b[0][2]) == 3) msg.payload = \"X wins\"\nif ((b[1][0] + b[1][1] + b[1][2]) == 3) msg.payload = \"X wins\"\nif ((b[2][0] + b[2][1] + b[2][2]) == 3) msg.payload = \"X wins\"\n\n// Check column 1 - 3\nif ((b[0][0] + b[1][0] + b[2][0]) == 3) msg.payload = \"X wins\"\nif ((b[0][1] + b[1][1] + b[2][1]) == 3) msg.payload = \"X wins\"\nif ((b[0][2] + b[1][2] + b[2][2]) == 3) msg.payload = \"X wins\"\n\n// Check DIAGONALS\nif ((b[0][0] + b[1][1] + b[2][2]) == 3) msg.payload = \"X wins\"\nif ((b[2][0] + b[1][1] + b[0][2]) == 3) msg.payload = \"X wins\"\n\n// ----------------------------------------------------------\n// Check to see if O wins \n// Check row 1 - 3\nif ((b[0][0] + b[0][1] + b[0][2]) == 6) msg.payload = \"O wins\"\nif ((b[1][0] + b[1][1] + b[1][2]) == 6) msg.payload = \"O wins\"\nif ((b[2][0] + b[2][1] + b[2][2]) == 6) msg.payload = \"O wins\"\n\n// Check column 1 - 3\nif ((b[0][0] + b[1][0] + b[2][0]) == 6) msg.payload = \"O wins\"\nif ((b[0][1] + b[1][1] + b[2][1]) == 6) msg.payload = \"O wins\"\nif ((b[0][2] + b[1][2] + b[2][2]) == 6) msg.payload = \"O wins\"\n\n// Check DIAGONALS\nif ((b[0][0] + b[1][1] + b[2][2]) == 6) msg.payload = \"O wins\"\nif ((b[2][0] + b[1][1] + b[0][2]) == 6) msg.payload = \"O wins\"\n\n// ----------------------------------------------------------\n// \nif (msg.payload != \"no winner yet\") msg.gameover = \"no\"\nif (msg.payload == \"It's a draw\")   msg.gameover = \"draw\"\nif (msg.payload == \"X wins\")   msg.gameover = \"yes\"\nif (msg.payload == \"O wins\")   msg.gameover = \"yes\"\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "94219e5b.949e7",
        "type": "change",
        "z": "e1fd8135.0c3c98",
        "name": "disable square",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 120,
        "wires": [
            [
                "10e682f6.b25e1d"
            ]
        ]
    },
    {
        "id": "dfb183f3.faeb4",
        "type": "function",
        "z": "e1fd8135.0c3c98",
        "name": "Mark square used",
        "func": "var square = msg.payload\nvar p = global.get(\"player\")\nvar b = global.get(\"board\")\n//node.warn(\"square =\"+square)\nswitch (square) {\n    case 0:\n        b[0][0] = p\n        break\n    case 1:\n        b[0][1] = p\n        break\n    case 2:\n        b[0][2] = p\n        break\n    case 10:\n        b[1][0] = p\n        break\n    case 11:\n        b[1][1] = p\n        break\n    case 12:\n        b[1][2] = p\n        break\n    case 20:\n        b[2][0] = p\n        break\n    case 21:\n        b[2][1] = p\n        break\n    case 22:\n        b[2][2] = p\n        break\n        \n}\nglobal.set(\"board\",b)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 60,
        "wires": [
            [
                "f983ea23.268478"
            ]
        ]
    },
    {
        "id": "e43506628b4a1cdb",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "AN-10 API Interface",
        "info": "https://omnipresense.com/wp-content/uploads/2023/11/AN-010-Z_API_Interface.pdf",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "bb2b78040385d37e",
        "type": "json",
        "z": "94d07e407c25f282",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 280,
        "wires": [
            [
                "36b68e0861cc5fc4",
                "830348149cb405ae"
            ]
        ]
    },
    {
        "id": "36b68e0861cc5fc4",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "debug-radar-all-output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 280,
        "wires": []
    },
    {
        "id": "35c0bee67148cfa7",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "debug-write-radar-key-valid-TimedSpeedCounts",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 640,
        "wires": []
    },
    {
        "id": "9496fe7a475726de",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "format influxdb write TimedSpeedCounts",
        "func": "\nconst newMsg = {};\n\nnewMsg.payload = [\n    {\n        average: Number(msg.payload.TimedSpeedCounts.average),\n        count: Number(msg.payload.TimedSpeedCounts.count),\n        time: (msg.payload.TimedSpeedCounts.time*1000)\n    },\n    {\n        location: env.get(\"VAR_LOCATION\"),\n        direction: String(msg.payload.TimedSpeedCounts.direction),\n        units: String(msg.payload.TimedSpeedCounts.units)\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "617c9bb213538929",
                "35c0bee67148cfa7"
            ]
        ]
    },
    {
        "id": "a9d702a51bc8f0c9",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "variables to pass",
        "info": "Via Docker Environment \n- `device_ip` of Pi (for influxDB server)\n- `location` string (for influxDB `location` tag)\n- `radar_camera` name of camera (for attaching speeds to events) - needs to match Frigate config\n\n\n",
        "x": 360,
        "y": 60,
        "wires": []
    },
    {
        "id": "526eb1967dda78c4",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "name": "TimedSpeedCounts are @O and @|300 (5-min)",
        "info": "",
        "x": 1020,
        "y": 700,
        "wires": []
    },
    {
        "id": "4681243b9c70e906",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "format influxdb write DetectedObjectVelocity",
        "func": "\nconst newMsg = {};\n\nnewMsg.payload = [\n    {\n        velocity: Number(msg.payload.DetectedObjectVelocity),\n        time: (msg.payload.time*1000)\n    },\n    {\n        location: env.get(\"VAR_LOCATION\"),\n        direction: String(msg.payload.direction),\n        units: String(msg.payload.unit)\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "b8db51ab64a3d61e",
                "67f64c75edc0ef13"
            ]
        ]
    },
    {
        "id": "affe7cfb9861e62d",
        "type": "serial in",
        "z": "94d07e407c25f282",
        "name": "receive OPS243 serial (USB - /dev/ttyACM0)",
        "serial": "d65c36624d553ee7",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "bb2b78040385d37e"
            ]
        ]
    },
    {
        "id": "8e8ede8ca221552b",
        "type": "serial out",
        "z": "94d07e407c25f282",
        "name": "send to OPS243 serial (USB)",
        "serial": "d65c36624d553ee7",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "617c9bb213538929",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "04cc3b7b3e019683",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb TimedSpeedCounts",
        "measurement": "TimedSpeedCounts",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "tm-05",
        "x": 660,
        "y": 700,
        "wires": []
    },
    {
        "id": "b8db51ab64a3d61e",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb DetectedObjectVelocity",
        "measurement": "DetectedObjectVelocity",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "tm-05",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "67f64c75edc0ef13",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "1d00b3011a12b204",
        "name": "debug-radar-write-DetectObjectVelocity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 480,
        "wires": []
    },
    {
        "id": "5ba75f5c9e2a85da",
        "type": "catch",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "scope": null,
        "uncaught": false,
        "x": 640,
        "y": 60,
        "wires": [
            [
                "84f8c1cca4483e4c"
            ]
        ]
    },
    {
        "id": "84f8c1cca4483e4c",
        "type": "debug",
        "z": "94d07e407c25f282",
        "name": "catch - flow-radar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "114c038c504f9f87",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "query all settings, after 0.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "\"?P\" & \"?N\" & \"?V\" & \"?B\" & \"??\" & \"O?\" & \"?F\" & \"?s\"",
        "payloadType": "jsonata",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "d30801432e1972b3",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar time (in seconds), after 0.2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "\"C=\" & $ceil($millis()/1000) & \"\\n\"",
        "payloadType": "jsonata",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "93dfd24a4e45dbb9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: set radar timezone, after 0.3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "\"CZ=\" & \"PST-7\" & \"\\n\"",
        "payloadType": "jsonata",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "b965ece6f3bd3377",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: base settings and filters, after 0.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"OJUSF0S2K+IGONO3OUOTOhOC\" & \"OMM>20\\n\" & \"OSR>5\\n\" & \"@O@|300\\n\" & \"A!\" ",
        "payloadType": "jsonata",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "73c028a0006c9cd9",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PI, idle power mode for settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"PI\"",
        "payloadType": "jsonata",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "efddf78e690358fc",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: PA, active power mode after settings, after 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "\"PA\"",
        "payloadType": "jsonata",
        "x": 260,
        "y": 360,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "78f9e09b02db0b2c",
        "type": "inject",
        "z": "94d07e407c25f282",
        "name": "init: save settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "\"A!\"",
        "payloadType": "jsonata",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "8e8ede8ca221552b"
            ]
        ]
    },
    {
        "id": "ea5d7236f592558d",
        "type": "comment",
        "z": "94d07e407c25f282",
        "name": "also capture the OC values (object summary)",
        "info": "",
        "x": 570,
        "y": 1040,
        "wires": []
    },
    {
        "id": "830348149cb405ae",
        "type": "switch",
        "z": "94d07e407c25f282",
        "name": "radar payload type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "DetectedObjectVelocity",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "TimedSpeedCounts",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "speed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "4681243b9c70e906"
            ],
            [
                "9496fe7a475726de"
            ],
            [
                "7b220a40adc14e3c"
            ]
        ]
    },
    {
        "id": "d5e5d0f288f9b186",
        "type": "influxdb out",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "influxdb": "73598328fc95017b",
        "name": "write influxdb RawSpeedMagnitude",
        "measurement": "RawSpeedMagnitude",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "taffic_monitor_01",
        "bucket": "tm-05",
        "x": 660,
        "y": 880,
        "wires": []
    },
    {
        "id": "7b220a40adc14e3c",
        "type": "function",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "format influxdb write raw speed, magnitude",
        "func": "var thisDirection = msg.payload.speed > 0 ? \"inbound\" : \"outbound\";\n\nconst newMsg = {};\n\nnewMsg.payload = [\n    {  //first object holds _field (speed_unit:value, magnitude:value)\n        [msg.payload.unit]: String(msg.payload.speed),\n        magnitude: String(msg.payload.magnitude),\n        time: (msg.payload.time*1000)\n    },\n    { //second object holds tags\n        location: env.get(\"VAR_LOCATION\"),\n        direction: thisDirection,\n    }\n];\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 820,
        "wires": [
            [
                "d5e5d0f288f9b186",
                "d88af763b70480d0"
            ]
        ]
    },
    {
        "id": "d88af763b70480d0",
        "type": "debug",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "debug-radar-raws-speeds-write",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 820,
        "wires": []
    },
    {
        "id": "5f62cb744592b108",
        "type": "comment",
        "z": "94d07e407c25f282",
        "g": "e138c998bef7d520",
        "name": "handle O3 speeds by saving array to each _value",
        "info": "",
        "x": 600,
        "y": 940,
        "wires": []
    },
    {
        "id": "6c2d22f0a8cb1fc1",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: Broker status events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd148029fe6bee47",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: broker publish events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 80,
        "wires": []
    },
    {
        "id": "038275ccb8bafbb0",
        "type": "mqtt in",
        "z": "49e416bfab1d4055",
        "name": "",
        "topic": "frigate/events",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a5d65dd0e3566daa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 160,
        "wires": [
            [
                "4a1c5b87abde2112",
                "bcdcd8861df95e07"
            ]
        ]
    },
    {
        "id": "4a1c5b87abde2112",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "debug: published frigate messages",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 160,
        "wires": []
    },
    {
        "id": "1720d60a87cfb2d7",
        "type": "aedes broker",
        "z": "49e416bfab1d4055",
        "name": "frigate-local",
        "mqtt_port": "1883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 90,
        "y": 60,
        "wires": [
            [
                "6c2d22f0a8cb1fc1"
            ],
            [
                "fd148029fe6bee47"
            ]
        ]
    },
    {
        "id": "bcdcd8861df95e07",
        "type": "switch",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "payload.type == \"end\"",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "67f433ccd5912ebd"
            ]
        ]
    },
    {
        "id": "67f433ccd5912ebd",
        "type": "switch",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "after label is car, bike, motorcycle (bikes)",
        "property": "payload.after.label",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "car",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "bicycle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "motorcycle",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 220,
        "y": 360,
        "wires": [
            [
                "6cfe5662fc478c14"
            ],
            [
                "6cfe5662fc478c14"
            ],
            [
                "6cfe5662fc478c14"
            ]
        ]
    },
    {
        "id": "6cfe5662fc478c14",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "calculate direction, add topic `event_end_car_bike`",
        "func": "var $myZoneNearIndex = msg.payload.after.entered_zones.indexOf(\"zone_near\");\nvar $myZoneFarIndex = msg.payload.after.entered_zones.indexOf(\"zone_far\");\n\nvar $myDirection = ($myZoneNearIndex >= 0 && $myZoneNearIndex >= 0) ? ($myZoneFarIndex < $myZoneNearIndex ? \"inbound\" : \"outbound\") : undefined;\n\nmsg.payload.after.nr_direction = $myDirection;\n\nmsg.topic = \"frigate_event\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "9f1012eacf4d076f",
                "6539eff5f28950e2",
                "0f3ff76b20f6fea0",
                "629e4b3f709f1e32"
            ]
        ]
    },
    {
        "id": "9f1012eacf4d076f",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "8dd778b3e5d3a05c",
        "name": "debug: calc direction",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "6539eff5f28950e2",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "create influxdb query based on msg, +/- 2 sec all directions, return median",
        "func": "var query = \"\";\n// query += \"from(bucket: \" + env.get(\"VAR_INFLUXDB_BUCKET\") + \")\"\nquery += \"from(bucket: \\\"tm-05\\\")\\n\";\nquery += \"    |> range(start: \" + (Math.floor(msg.payload.after.start_time)-2) +\", stop: \" + (Math.ceil(msg.payload.after.end_time)+2) + \")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"DetectedObjectVelocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"velocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"location\\\"] == \\\"\" + env.get(\"VAR_LOCATION\") + \"\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"units\\\"] == \\\"mph\\\")\\n\";\nquery += \"    |> median(column: \\\"_value\\\")\\n\"; \n\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "d541afce049d3481"
            ]
        ]
    },
    {
        "id": "d541afce049d3481",
        "type": "influxdb in",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "influxdb": "73598328fc95017b",
        "name": "query, DetectedObjectVelocity, median",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "taffic_monitor_01",
        "x": 490,
        "y": 620,
        "wires": [
            [
                "29ba5f8d0c2ef420"
            ]
        ]
    },
    {
        "id": "031f1f21a0ab203d",
        "type": "http request",
        "z": "49e416bfab1d4055",
        "g": "9ee8ebd820661432",
        "name": "add subLabel to event",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://{{{frigate_ip}}}:5000/api/events/{{{event_id}}}/sub_label",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1060,
        "y": 1140,
        "wires": [
            [
                "50574c0e9f62cf10"
            ]
        ]
    },
    {
        "id": "0f3ff76b20f6fea0",
        "type": "join",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "join Event+Radar",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 930,
        "y": 680,
        "wires": [
            [
                "e63efdd922665136"
            ]
        ],
        "info": "# Sample Output:\n\n```\n{\n    \"topic\": \"query_return\",\n    \"payload\": {\n        \"event_end_car_bike\": {\n            \"before\": {\n                \"id\": \"1712153303.328575-u22ucl\",\n                \"camera\": \"picam_h264\",\n                \"frame_time\": 1712153456.913404,\n                \"snapshot\": {\n                    \"frame_time\": 1712153453.713148,\n                    \"box\": [\n                        842,\n                        253,\n                        2131,\n                        897\n                    ],\n                    \"area\": 830116,\n                    \"region\": [\n                        592,\n                        0,\n                        2304,\n                        1712\n                    ],\n                    \"score\": 0.8046875,\n                    \"attributes\": []\n                },\n                \"label\": \"car\",\n                \"sub_label\": null,\n                \"top_score\": 0.80859375,\n                \"false_positive\": false,\n                \"start_time\": 1712153303.328575,\n                \"end_time\": null,\n                \"score\": 0.796875,\n                \"box\": [\n                    365,\n                    197,\n                    1008,\n                    533\n                ],\n                \"area\": 216048,\n                \"ratio\": 1.9136904761904763,\n                \"region\": [\n                    301,\n                    0,\n                    1057,\n                    756\n                ],\n                \"stationary\": false,\n                \"motionless_count\": 2,\n                \"position_changes\": 2,\n                \"current_zones\": [],\n                \"entered_zones\": [\n                    \"zone_near\",\n                    \"zone_far\"\n                ],\n                \"has_clip\": true,\n                \"has_snapshot\": true,\n                \"attributes\": {},\n                \"current_attributes\": []\n            },\n            \"after\": {\n                \"id\": \"1712153303.328575-u22ucl\",\n                \"camera\": \"picam_h264\",\n                \"frame_time\": 1712153469.448711,\n                \"snapshot\": {\n                    \"frame_time\": 1712153453.713148,\n                    \"box\": [\n                        842,\n                        253,\n                        2131,\n                        897\n                    ],\n                    \"area\": 830116,\n                    \"region\": [\n                        592,\n                        0,\n                        2304,\n                        1712\n                    ],\n                    \"score\": 0.8046875,\n                    \"attributes\": []\n                },\n                \"label\": \"car\",\n                \"sub_label\": null,\n                \"top_score\": 0.80859375,\n                \"false_positive\": false,\n                \"start_time\": 1712153303.328575,\n                \"end_time\": 1712153474.711017,\n                \"score\": 0.6171875,\n                \"box\": [\n                    0,\n                    341,\n                    70,\n                    441\n                ],\n                \"area\": 7000,\n                \"ratio\": 0.7,\n                \"region\": [\n                    0,\n                    188,\n                    428,\n                    616\n                ],\n                \"stationary\": false,\n                \"motionless_count\": 0,\n                \"position_changes\": 2,\n                \"current_zones\": [],\n                \"entered_zones\": [\n                    \"zone_near\",\n                    \"zone_far\"\n                ],\n                \"has_clip\": true,\n                \"has_snapshot\": true,\n                \"attributes\": {},\n                \"current_attributes\": [],\n                \"nr_direction\": \"outbound\"\n            },\n            \"type\": \"end\"\n        },\n        \"query_return\": [\n            {\n                \"result\": \"_result\",\n                \"table\": 0,\n                \"_start\": \"2024-04-03T14:08:21Z\",\n                \"_stop\": \"2024-04-03T14:11:17Z\",\n                \"_field\": \"velocity\",\n                \"_measurement\": \"DetectedObjectVelocity\",\n                \"direction\": \"outbound\",\n                \"location\": \"ne26th-wasco-sb-01\",\n                \"units\": \"mph\",\n                \"_value\": -8\n            }\n        ]\n    },\n    \"qos\": 0,\n    \"retain\": false,\n    \"_msgid\": \"19500feb8926f41d\",\n    \"query\": \"from(bucket: \\\"tm-05\\\")\\n    |> range(start: 1712153301, stop: 1712153477)\\n    |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"DetectedObjectVelocity\\\")\\n    |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"velocity\\\")\\n    |> filter(fn: (r) => r[\\\"direction\\\"] == \\\"outbound\\\")\\n    |> filter(fn: (r) => r[\\\"location\\\"] == \\\"ne26th-wasco-sb-01\\\")\\n    |> filter(fn: (r) => r[\\\"units\\\"] == \\\"mph\\\")\\n    |> median(column: \\\"_value\\\")\\n\"\n}\n```"
    },
    {
        "id": "e63efdd922665136",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "match Event+Radar direction",
        "func": "//if only 1 Radar.direction USE THAT\nif (msg.payload.query_return_median.length == 1) {\n    //  check if Event.nr_direction MATCHES Radar.direction THEN good\n    if (msg.payload.frigate_event.after.nr_direction == msg.payload.query_return_median[0].direction) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.frigate_event.after.nr_direction;\n        msg.speed_match = msg.payload.query_return_median[0]._value;\n    }\n    //  if Event.nr_direction == undefined THEN use 1 that came through radar \n    else if (msg.payload.frigate_event.after.nr_direction == undefined) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.query_return_median[0].direction;\n        msg.speed_match = msg.payload.query_return_median[0]._value;\n    }\n}\n//  multiple radar directions, but if Event.nr_direction MATCHES Radar.direction THEN good\nelse if ((msg.payload.query_return_median.length > 1)\n    && (msg.payload.frigate_event.after.nr_direction != undefined)) {\n\n    //find matching median value to frigate_event\n    var dirIndex = msg.payload.query_return_median.map((o) => o.direction).indexOf(msg.payload.frigate_event.after.nr_direction);\n    if (dirIndex >= 0) {\n        msg.dir_speed_status = \"direction_speed_match\";\n        msg.direction_match = msg.payload.query_return_median[dirIndex].direction;\n        msg.speed_match = msg.payload.query_return_median[dirIndex]._value;\n    }\n    else {\n        msg.dir_speed_status = \"direction_speed_no_match\";\n        msg.direction_match = undefined;\n        msg.speed_match = undefined;\n    }\n}\n//      if == 0 Radar.direction DO NOT REPORT\nelse {\n        msg.dir_speed_status = \"direction_speed_no_match\"; \n        msg.direction_match = undefined;\n        msg.speed_match = undefined;\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 740,
        "wires": [
            [
                "b9ec057a98fc7391",
                "b71b0fcb6d1e558c",
                "669e68daa73311d6"
            ]
        ]
    },
    {
        "id": "669e68daa73311d6",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "9ee8ebd820661432",
        "name": "create subLabel message",
        "func": "var newMsg = {};\n\nnewMsg.event_id = msg.payload.frigate_event.after.id;\nnewMsg.frigate_ip = env.get(\"VAR_DEVICE_IP\");\n\nnewMsg.payload = {\n    \"subLabel\": String(\"speed_\" + msg.payload.query_return_median[0].units + \"_\" + msg.payload.query_return_median[0].direction), \n    \"subLabelScore\": (Math.abs(msg.payload.query_return_median[0]._value)/1000)\n    };\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1080,
        "wires": [
            [
                "1b0344bd4829de6b",
                "031f1f21a0ab203d"
            ]
        ]
    },
    {
        "id": "1b0344bd4829de6b",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "9ee8ebd820661432",
        "name": "subLabel complete message to send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1080,
        "wires": []
    },
    {
        "id": "50574c0e9f62cf10",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "9ee8ebd820661432",
        "name": "frigate return, event speed sub_label",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1140,
        "wires": []
    },
    {
        "id": "400aaccc21e5eaf7",
        "type": "mongodb4",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "clientNode": "4b8d22be1aa15cf2",
        "mode": "collection",
        "collection": "events",
        "operation": "insertOne",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "mongo insertOne events",
        "x": 1150,
        "y": 940,
        "wires": [
            [
                "078438fe6e931391"
            ]
        ]
    },
    {
        "id": "078438fe6e931391",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "mongo return",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 940,
        "wires": []
    },
    {
        "id": "b71b0fcb6d1e558c",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "create mongo message",
        "func": "const newMsg = {};\nnewMsg.payload = {}; // contain everything going into a DB record, single record\nnewMsg.payload = {}; // single collection of strings\n//newMsg.payload.radar = {}; // contain all desired radar readings\n//Don't attach radar data here... Just conflates the reporting DB\n\n// Frigate Event info\nnewMsg.payload.id = msg.payload.frigate_event.after.id;\nnewMsg.payload.camera = msg.payload.frigate_event.after.camera;\nnewMsg.payload.frame_time = msg.payload.frigate_event.after.frame_time;\nnewMsg.payload.label = msg.payload.frigate_event.after.label;\nnewMsg.payload.sub_label = msg.payload.frigate_event.after.sub_label;\nnewMsg.payload.top_score = msg.payload.frigate_event.after.top_score;\nnewMsg.payload.start_time = msg.payload.frigate_event.after.start_time;\nnewMsg.payload.end_time = msg.payload.frigate_event.after.end_time;\nnewMsg.payload.entered_zones = msg.payload.frigate_event.after.entered_zones; //array\nnewMsg.payload.direction_calc = msg.direction_match;\nnewMsg.payload.speed_calc = msg.speed_match;\nnewMsg.payload.thumbnail_base64jpg = msg.payload.event_api.thumbnail;\n\n// Attached Radar info\n\n//newMsg.payload.radar.query_return_median = msg.payload.query_return_median[0];\n\n//newMsg.payload.radar.query_return_nonagg = msg.payload.query_return_nonagg;\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "466942b727a6409c",
                "400aaccc21e5eaf7"
            ]
        ],
        "info": "//to do each array item\n\nfor (const i in msg.payload.query_return_nonagg) {\n    newMsg.payload.radar.push({\n        type: \"DetectedObjectVelocity_nonagg_nodir\",\n        result: msg.payload.query_return_nonagg[i]\n    }\n    );\n}"
    },
    {
        "id": "466942b727a6409c",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "d14033e4e7acdf1b",
        "name": "composed mongo message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 880,
        "wires": []
    },
    {
        "id": "065e571efca99657",
        "type": "function",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "33bbc9893e1eae0e",
        "name": "create influxdb query based on msg, +/- 2 sec, DetectedObjectVelocity all directions, non-agg",
        "func": "var query = \"\";\n// query += \"from(bucket: \" + env.get(\"VAR_INFLUXDB_BUCKET\") + \")\"\nquery += \"from(bucket: \\\"tm-05\\\")\\n\";\nquery += \"    |> range(start: \" + (Math.floor(msg.payload.after.start_time)-2) +\", stop: \" + (Math.ceil(msg.payload.after.end_time)+2) + \")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"DetectedObjectVelocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"_field\\\"] == \\\"velocity\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"location\\\"] == \\\"\" + env.get(\"VAR_LOCATION\") + \"\\\")\\n\";\nquery += \"    |> filter(fn: (r) => r[\\\"units\\\"] == \\\"mph\\\")\\n\";\n\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 880,
        "wires": [
            [
                "5cd8c1f5d6326bf1"
            ]
        ]
    },
    {
        "id": "5cd8c1f5d6326bf1",
        "type": "influxdb in",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "33bbc9893e1eae0e",
        "influxdb": "73598328fc95017b",
        "name": "query DetectedObjectVelocity, non-agg",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "taffic_monitor_01",
        "x": 490,
        "y": 940,
        "wires": [
            [
                "34e3fdd428d4761c"
            ]
        ]
    },
    {
        "id": "34e3fdd428d4761c",
        "type": "function",
        "z": "49e416bfab1d4055",
        "d": true,
        "g": "33bbc9893e1eae0e",
        "name": "query, add topic, `query_return_nonagg`",
        "func": "msg.topic = \"query_return_nonagg\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "b9ec057a98fc7391",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "event+radar w direction calcs",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 560,
        "wires": []
    },
    {
        "id": "29ba5f8d0c2ef420",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "add topic, `query_return_median`",
        "func": "msg.topic = \"query_return_median\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 680,
        "wires": [
            [
                "0f3ff76b20f6fea0"
            ]
        ]
    },
    {
        "id": "629e4b3f709f1e32",
        "type": "http request",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "frigate http /api/events/id",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.10.223:5000/api/events/{{{payload.after.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "be1439498cc44b59"
            ]
        ]
    },
    {
        "id": "be1439498cc44b59",
        "type": "function",
        "z": "49e416bfab1d4055",
        "g": "e7337074cbb5c952",
        "name": "add topic, `event_api`",
        "func": "msg.topic = \"event_api\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 740,
        "wires": [
            [
                "0f3ff76b20f6fea0"
            ]
        ]
    },
    {
        "id": "7c030508e545444c",
        "type": "catch",
        "z": "49e416bfab1d4055",
        "name": "catch - flow-mqtt",
        "scope": null,
        "uncaught": false,
        "x": 680,
        "y": 40,
        "wires": [
            [
                "ace98a4209f56f19"
            ]
        ]
    },
    {
        "id": "ace98a4209f56f19",
        "type": "debug",
        "z": "49e416bfab1d4055",
        "name": "catch - flow-mqtt",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "8cee82669b6b8512",
        "type": "comment",
        "z": "90d5c925f9fbf9fd",
        "name": "capture bluetooth to influxdb",
        "info": "",
        "x": 220,
        "y": 140,
        "wires": []
    }
]