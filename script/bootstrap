#!/bin/sh

# script/bootstrap: Resolve all dependencies that the application requires to
#                   run.
# scripts based on https://github.com/github/scripts-to-rule-them-all

set -e

cd "$(dirname "$0")/.."

#assume lastest Raspberry PI OS Debian 12 (bookworm) and recommended software (full install)
# full install required for camera (lite version does not have H.264 codec for libcamera)
#update system
sudo apt-get update
sudo apt-get upgrade -y

##-- install docker / docker compose,
#alternative docker intall, for dev
# here https://raspberrytips.com/docker-on-raspberry-pi/
# or #https://docs.docker.com/engine/install/raspberry-pi-os/#install-using-the-convenience-script
echo "==> Installing docker…"
curl -sSL https://get.docker.com | sh

sudo usermod -aG docker $USER
##-- /docker

#clone repo to get all the files
git clone https://github.com/glossyio/rpi-buster
cd rpi-buster/

echo "==> Setting up Dockerfiles…"
##-- install Frigate
## Add Frigate Dockerfile
#create directories and config.yml
mkdir -p ~/code/frigate  #for config and files
mkdir -p ~/code/frigate/storage  #for media

# copy repo files to local folders
cp docker-frigate/docker-compose-frigate.yaml ~/code/frigate/docker-compose-frigate.yml
cp docker-frigate/frigate-config.yaml ~/code/frigate/config.yml
##-- /frigate


##-- Add node-red Dockerfile
mkdir -p ~/code/nodered/data

# copy repo files to local folders
cp docker-nodered/docker-compose-node-red.yaml ~/code/nodered/docker-compose-node-red.yml
cp -rp node-red-project ~/code/nodered/data/node-red-project
##-- /node-red


##-- install go2rtc to use the Rpi camera
## Add go2rtc Dockerfile -- Don't use Dockerfile, will have to pass /dev/; instead, install locally
## background:  https://community.home-assistant.io/t/raspberry-pi-camera-as-dumb-h264-stream-for-frigate/565784/4
## alternatively use docker for libcamera, pass for now: https://github.com/raspberrypi/rpicam-apps/issues/270#issuecomment-1059372626
#create directories
mkdir -p ~/code/go2rtc

#for go2rtc config, https://github.com/AlexxIT/go2rtc#source-exec

#install go2rtc binary
sudo mkdir /var/lib/go2rtc

#sudo curl -O -L https://github.com/AlexxIT/go2rtc/releases/download/v1.8.2/go2rtc_linux_arm64
echo "==> Installing go2rtc…"
sudo curl -L https://github.com/AlexxIT/go2rtc/releases/download/v1.8.5/go2rtc_linux_arm64 -o /var/lib/go2rtc/go2rtc_linux_arm64_185
sudo chmod 755 /var/lib/go2rtc/go2rtc_linux_arm64_185
sudo chmod +x /var/lib/go2rtc/go2rtc_linux_arm64_185
##-- /go2rtc


##-- install coral tpu drivers
#install EdgeTPU runtime library (??) https://coral.ai/docs/accelerator/get-started/#1-install-the-edge-tpu-runtime
echo "==> Installing Coral TPU drivers…"
echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update

sudo apt-get install libedgetpu1-std
##-- /coral tpu drivers

