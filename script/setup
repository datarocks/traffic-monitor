#!/bin/sh

# script/setup: Set up application for the first time after cloning, or set it
#               back to the initial first unused state.

set -e

cd "$(dirname "$0")/.."

#uncomment for fresh OS install
#script/bootstrap

echo "==> Setting up Dockerfiles…"
##-- install Frigate
## Add Frigate Dockerfile
#create directories and config.yml
mkdir -p ~/code/frigate  #for files
mkdir -p ~/code/frigate/config  #for frigate configuration file
mkdir -p ~/code/frigate/storage  #for media
cp docker-frigate/docker-compose-frigate.yaml ~/code/frigate/docker-compose-frigate.yml
cp docker-frigate/frigate-config.yaml ~/code/frigate/config/config.yml
##-- /frigate


##-- Add node-red Dockerfile, settings, and base flows
mkdir -p ~/code/nodered/data
cp docker-nodered/docker-compose-node-red.yaml ~/code/nodered/docker-compose-node-red.yml
cp -rp node-red-project ~/code/nodered/data/node-red-project
cp node-red-project/flows.json ~/code/nodered/data
cp node-red-project/flows_cred.json ~/code/nodered/data
cp node-red-project/package.json ~/code/nodered/data
cp node-red-project/settings.js ~/code/nodered/data
##-- /node-red


##-- Add influxDB Dockerfile
mkdir -p ~/code/influxdb/data
mkdir -p ~/code/influxdb/config
cp docker-influxdb/docker-compose-influxdb.yaml ~/code/influxdb/docker-compose-influxdb.yml
##-- /influxdb


##-- Add mongo Dockerfile
mkdir -p ~/code/mongodb/data
cp docker-mongodb/docker-compose-mongodb.yaml ~/code/mongodb/docker-compose-mongodb.yml
##-- /mongo


#create backup directory
mkdir -p ~/code/backup

##--add combined compose file to start all services
cp compose.yaml ~/code/compose.yaml

echo "==> Setting up go2rtc systemd service…"

##-- set up go2rtc to use the Rpi camera
echo \
  "# /etc/systemd/system/go2rtc_server.service
# to run: sudo systemctl stop/start/restart/enable/disable go2rtc_server

[Unit]
Description=go2rtc
After=network.target rc-local.service

[Service]
Restart=always
WorkingDirectory=/var/lib/go2rtc/
ExecStart=/var/lib/go2rtc/go2rtc_linux_arm64

[Install]
WantedBy=multi-user.target" | \
  sudo tee /etc/systemd/system/go2rtc_server.service > /dev/null
sudo chmod 644 /etc/systemd/system/go2rtc_server.service

echo \
"# /var/lib/go2rtc/go2rtc.yaml
streams:
  picam_h264: exec:rpicam-vid --camera 0 --mode 2304:1296 --framerate 15 --exposure sport --hdr --timeout 0 --nopreview --codec h264 --libav-video-codec h264 --libav-format h264 --inline -o -
  picam_gs_h264: exec:rpicam-vid --camera 1 --mode 1456:1088 --framerate 15 --exposure sport --hdr --timeout 0 --nopreview --codec h264 --libav-video-codec h264 --libav-format h264 --inline -o -" | \
  sudo tee /var/lib/go2rtc/go2rtc.yaml > /dev/null
sudo chmod 744 /var/lib/go2rtc/go2rtc.yaml

#rpicam-vid settings
# rpicam-vid --list-cameras for modes available

